Entities are one of the main things you will be using to build your game. Everything, from the player, to enemies, to the world itself, is made out of entities.


--Instantiation--
Entities can be created via the following functions:

	virtual int Create(const char *spritePath, int x, int y, int width, int height);
	virtual int Create(const char *spritePath, Vector position, Vector scale);

both of which will take a string to the sprite file in addition to a transform and scale.
Create() will load the image, set the sprite's active boolean to true, set the transform and scale, then assign an id which gets passed to a global entityTracker array
which is defined in main.cpp. These will return -1 if the sprite is not found.

To destroy an entity, you can use

	int Destroy();

which will destroy the SDL texture and set the active boolean to false.



--Drawing--
Swapping the sprite for an entity is done via the following function:

	int swapSprite(const char *spritePath);

Which will return -1 if the sprite fails to load.
The draw function just takes the transform and scale parameters of each entity and outputs it to the screen, so long as it is active:

	int Draw();

Currently, the main function calls this function every frame over the entityTracker array.
Changing the transparency of the sprite can be done by calling

	int changeTransparency(Uint8 translucensy);

Which sets the alpha of the sprite according to a int scale of 0 to 255.



--Members--
The active boolean and sprite are both private members, the former of which can be accessed/modified via the following:

	bool isActive();
	int Enable();
	int Disable();

Both the transform and the id are publicly accessable. (Transform is defined in transform.h, and has a Vectors for "position" and "scale", both of which are public.)



--Collision--
Collision currently is done via 

	bool Collided(Entity e);

which checks the sprites of both entities and checks for overlapping.
	
	