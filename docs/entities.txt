Entities are one of the main things you will be using to build your game. Everything, from the player, to enemies, to the world itself, is made out of entities.


--Instantiation--
Entities can be created via the following functions:

	virtual int Create(const char *spritePath, int x, int y, int width, int height);
	virtual int Create(const char *spritePath, Vector position, Vector scale);
	virtual int Create(SDL_Texture* sprite, Transform t);

two of which will take a string to the sprite file in addition to a transform and scale.
Create() will load the image, set the sprite's active boolean to true, set the transform and scale, then assign an id which gets passed to a global entityTracker array
which is defined in main.cpp. These will return -1 if the sprite is not found.
The third creates an Entity at the given Transform, given that the sprite already exists. All entities tied to this sprite will no longer be rendered when the sprite is
destroyed.

Clones are special entities which are dynamically allocated, and can be created via the following functions:

	virtual Entity* Clone();
	virtual Entity* Clone(Transform t);

The first of which creates a clone at the same location, the second of which takes a Transform. The Clones call Create() using the already created sprite.

To destroy an entity, you can use

	int Destroy();

which will destroy the SDL texture and set the active boolean to false. It also checks if the Entity is a clone, in which case the object will be freed.



--Drawing--
Swapping the sprite for an entity is done via the following function:

	int swapSprite(const char *spritePath);

Which will return -1 if the sprite fails to load.
The draw function just takes the transform and scale parameters of each entity and outputs it to the screen, so long as it is active:

	int Draw();

Currently, the main function calls this function every frame over the entityTracker array.
Changing the transparency of the sprite can be done by calling

	int changeTransparency(Uint8 translucensy);

Which sets the alpha of the sprite according to a int scale of 0 to 255.



--Members--
The active boolean and sprite are both private members, the former of which can be accessed/modified via the following:

	bool isActive();
	int Enable();
	int Disable();

Both the transform and the id are publicly accessable. (Transform is defined in transform.h, and has a Vectors for "position" and "scale", both of which are public.)



--Collision--
Collision currently is done via 

	bool Collided(Entity e);

which checks the sprites of both entities and checks for overlapping.
	
	